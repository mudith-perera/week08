# week08/.github/workflows/frontend-cd.yml

name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: "External IP of Product Service"
        required: true
        default: "http://<ip_address>:8000"
      order_api_ip:
        description: "External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)"
        required: true
        default: "http://<ip_address>:8001"
      aks_cluster_name:
        description: "Name of the AKS Cluster to deploy to"
        required: true
        default: "<aks_name>"
      aks_resource_group:
        description: "Resource Group of the AKS Cluster"
        required: true
        default: "<<resource_group_name>"

  workflow_call:
    inputs:
      product_api_ip:
        required: true
        type: string
      order_api_ip:
        required: true
        type: string
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login using a Service Principal JSON secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry (ACR) using the registry NAME (no .azurecr.io)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      # Inject backend IPs into the frontend before building the image
      - name: Inject Backend IPs into Frontend main.js
        run: |
          echo "Injecting IPs into frontend/main.js"
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js

          echo "--- Modified main.js content ---"
          grep -E "PRODUCT|ORDER|http" -n frontend/main.js || true
          echo "---------------------------------"

      # Build & push the Frontend image to your ACR using the LOGIN SERVER
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      # Get kubectl context for your AKS
      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      # Ensure the cluster can pull from ACR even if attach-acr is blocked by policy/RBAC
      - name: Enable ACR admin (OK for assignment/demo)
        run: az acr update -n ${{ secrets.ACR_NAME }} --admin-enabled true

      - name: Fetch ACR admin creds
        id: acrcreds
        run: |
          echo "user=$(az acr credential show -n '${{ secrets.ACR_NAME }}' --query username -o tsv)" >> $GITHUB_OUTPUT
          echo "pass=$(az acr credential show -n '${{ secrets.ACR_NAME }}' --query 'passwords[0].value' -o tsv)" >> $GITHUB_OUTPUT

      - name: Create/refresh imagePullSecret in AKS (frontend)
        run: |
          kubectl delete secret acr-auth --ignore-not-found
          kubectl create secret docker-registry acr-auth \
            --docker-server="${{ secrets.ACR_LOGIN_SERVER }}" \
            --docker-username='${{ steps.acrcreds.outputs.user }}' \
            --docker-password='${{ steps.acrcreds.outputs.pass }}'

      - name: Patch default service account to use acr-auth (idempotent)
        run: |
          kubectl patch serviceaccount default \
            -p '{"imagePullSecrets":[{"name":"acr-auth"}]}' || true

      # Deploy the frontend resources (Deployment/Service in k8s/frontend.yaml)
      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend with latest tag to AKS cluster: ${{ inputs.aks_cluster_name }}"
          cd k8s/
          kubectl apply -f frontend.yaml

      # (Optional) Show the service to help capture the EXTERNAL-IP in logs
      - name: Show Frontend Service
        run: kubectl get svc frontend-w08e1 -o wide || true

      - name: Logout from Azure (AKS deployment)
        run: az logout
